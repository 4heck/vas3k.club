import random
from datetime import timedelta, datetime

from django.conf import settings
from django.db.models import Q, Count
from django.http import Http404
from django.shortcuts import render, get_object_or_404
from django.urls import reverse

from comments.models import Comment, CommentVote
from common.flat_earth import parse_horoscope
from landing.models import GodSettings
from posts.models import Post, PostVote
from users.models import User


def email_confirm(request, user_id, secret):
    user = get_object_or_404(User, id=user_id, secret_hash=secret)

    user.is_email_verified = True
    user.save()

    return render(request, "message.html", {
        "title": "üíå –í–∞—à –∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
        "message": "–¢–µ–ø–µ—Ä—å —Ç—É–¥–∞ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∂—É—Ä–Ω–∞–ª –ö–ª—É–±–∞ –∏ –¥—Ä—É–≥–∏–µ –æ–ø–æ–≤–µ—â–∞–ª–∫–∏."
    })


def email_unsubscribe(request, user_id, secret):
    user = get_object_or_404(User, id=user_id, secret_hash=secret)

    user.is_email_unsubscribed = True
    user.email_digest_type = User.EMAIL_DIGEST_TYPE_NOPE
    user.save()

    return render(request, "message.html", {
        "title": "üôÖ‚Äç‚ôÄÔ∏è –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö –ø–∏—Å–µ–º –ö–ª—É–±–∞",
        "message": "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –≤—Ä–µ–º—è, –ø–æ—Ç–æ–º—É –æ—Ç–ø–∏—Å–∞–ª–∏ –≤–∞—Å –æ—Ç –≤—Å–µ–≥–æ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é. "
                   "–í—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç –Ω–∞—Å –Ω–∏–∫–∞–∫–∏—Ö –ø–∏—Å–µ–º. "
                   "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    })


def email_digest_switch(request, digest_type, user_id, secret):
    user = get_object_or_404(User, id=user_id, secret_hash=secret)

    if not dict(User.EMAIL_DIGEST_TYPES).get(digest_type):
        return Http404()

    user.email_digest_type = digest_type
    user.is_email_unsubscribed = False
    user.save()

    if digest_type == User.EMAIL_DIGEST_TYPE_DAILY:
        return render(request, "message.html", {
            "title": "üî• –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–µ–π–ª–∏-–¥–∞–π–¥–∂–µ—Å—Ç",
            "message": "–û—Ñ–∏–≥–µ–Ω–Ω–æ. "
                       "–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞ –≤—Å–µ–≥–æ –Ω–æ–≤–æ–≥–æ –≤ –ö–ª—É–±–µ."
        })
    elif digest_type == User.EMAIL_DIGEST_TYPE_WEEKLY:
        return render(request, "message.html", {
            "title": "üìÖ –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∂—É—Ä–Ω–∞–ª",
            "message": "–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ–¥–±—Ä–∫–∞ –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –ö–ª—É–±–µ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é. "
                       "–≠—Ç–æ —É–¥–æ–±–Ω–æ, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –Ω–µ –æ—Ç–Ω–∏–º–∞–µ—Ç –≤–∞—à–µ –≤—Ä–µ–º—è."
        })
    elif digest_type == User.EMAIL_DIGEST_TYPE_NOPE:
        return render(request, "message.html", {
            "title": "üôÖ‚Äç‚ôÄÔ∏è –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫ –ö–ª—É–±–∞",
            "message": "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –≤—Ä–µ–º—è, –ø–æ—Ç–æ–º—É –æ—Ç–ø–∏—Å–∞–ª–∏ –≤–∞—Å –æ—Ç –Ω–∞—à–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. "
                       "–ú–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ –∏–ª–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞."
        })
    else:
        return render(request, "message.html", {
            "title": "üëç –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã",
            "message": ""
        })


def daily_digest(request, user_slug):
    user = get_object_or_404(User, slug=user_slug)

    end_date = datetime.utcnow()
    start_date = end_date - timedelta(days=1)
    if end_date.weekday() == 1:
        # we don't have daily on mondays and weekends, we need to include all these posts at tuesday
        start_date = end_date - timedelta(days=3)

    created_at_condition = dict(created_at__gte=start_date, created_at__lte=end_date)
    published_at_condition = dict(published_at__gte=start_date, published_at__lte=end_date)

    # Moon
    moon_phase = parse_horoscope()

    # New actions
    post_comment_actions = Comment.visible_objects()\
        .filter(
            post__author=user,
            **created_at_condition
        )\
        .values("post__type", "post__slug", "post__title")\
        .annotate(count=Count("id"))\
        .order_by()
    reply_actions = Comment.visible_objects()\
        .filter(
            reply_to__author=user,
            **created_at_condition
        )\
        .values("post__type", "post__slug", "post__title")\
        .annotate(count=Count("reply_to_id"))\
        .order_by()
    upvotes = PostVote.objects.filter(post__author=user, **created_at_condition).count() \
        + CommentVote.objects.filter(comment__author=user, **created_at_condition).count()

    new_events = [
        {
            "type": "post_comment",
            "post_url": reverse("show_post", kwargs={"post_type": e["post__type"], "post_slug": e["post__slug"]}),
            "post_title": e["post__title"],
            "count": e["count"],
        } for e in post_comment_actions
    ] + [
        {
            "type": "reply",
            "post_url": reverse("show_post", kwargs={"post_type": e["post__type"], "post_slug": e["post__slug"]}),
            "post_title": e["post__title"],
            "count": e["count"],
        } for e in reply_actions
    ] + [
        {
            "type": "upvotes",
            "count": upvotes,
        }
    ]

    # Best posts
    posts = Post.visible_objects()\
        .filter(is_approved_by_moderator=True, **published_at_condition)\
        .exclude(type__in=[Post.TYPE_INTRO, Post.TYPE_WEEKLY_DIGEST])\
        .order_by("-upvotes")[:100]

    # Best comments
    comments = Comment.visible_objects() \
        .filter(**created_at_condition) \
        .filter(is_deleted=False)\
        .order_by("-upvotes")[:1]

    # New joiners
    intros = Post.visible_objects()\
        .filter(type=Post.TYPE_INTRO, **published_at_condition)\
        .order_by("-upvotes")

    if not posts and not comments and not intros:
        raise Http404()

    return render(request, "emails/daily.html", {
        "user": user,
        "events": new_events,
        "intros": intros,
        "posts": posts,
        "comments": comments,
        "date": end_date,
        "moon_phase": moon_phase,
    })


def weekly_digest(request):
    end_date = datetime.utcnow()
    start_date = end_date - timedelta(days=8)  # make 8, not 7, to include marginal users

    created_at_condition = dict(created_at__gte=start_date, created_at__lte=end_date)
    published_at_condition = dict(published_at__gte=start_date, published_at__lte=end_date)

    # New users
    intros = Post.visible_objects()\
        .filter(type=Post.TYPE_INTRO, **published_at_condition)\
        .order_by("-upvotes")
    newbie_count = User.objects\
        .filter(is_profile_reviewed=True, **created_at_condition)\
        .count()

    # Best posts
    featured_post = Post.visible_objects()\
        .exclude(type=Post.TYPE_INTRO)\
        .filter(
            label__isnull=False,
            label__code="top_week",
            **published_at_condition
         )\
        .order_by("-upvotes")\
        .first()

    posts = Post.visible_objects()\
        .filter(is_approved_by_moderator=True, **published_at_condition)\
        .exclude(type__in=[Post.TYPE_INTRO, Post.TYPE_WEEKLY_DIGEST])\
        .exclude(id=featured_post.id if featured_post else None)\
        .order_by("-upvotes")[:12]

    # Video of the week
    top_video_comment = Comment.visible_objects() \
        .filter(**created_at_condition) \
        .filter(is_deleted=False)\
        .filter(upvotes__gte=3)\
        .filter(Q(text__contains="https://youtu.be/") | Q(text__contains="youtube.com/watch"))\
        .order_by("-upvotes")\
        .first()

    top_video_post = None
    if not top_video_comment:
        top_video_post = Post.visible_objects() \
            .filter(type=Post.TYPE_LINK, upvotes__gte=3) \
            .filter(**published_at_condition) \
            .filter(Q(url__contains="https://youtu.be/") | Q(url__contains="youtube.com/watch")) \
            .order_by("-upvotes") \
            .first()

    # Best comments
    comments = Comment.visible_objects() \
        .filter(**created_at_condition) \
        .filter(is_deleted=False)\
        .exclude(id=top_video_comment.id if top_video_comment else None)\
        .order_by("-upvotes")[:3]

    # Intro from author
    author_intro = GodSettings.objects.first().digest_intro

    if not author_intro and not posts and not comments:
        raise Http404()

    return render(request, "emails/weekly_digest.html", {
        "posts": posts,
        "comments": comments,
        "intros": intros,
        "newbie_count": newbie_count,
        "top_video_comment": top_video_comment,
        "top_video_post": top_video_post,
        "featured_post": featured_post,
        "author_intro": author_intro,
        "issue_number": (end_date - settings.LAUNCH_DATE).days // 7
    })
